[Now as an alternative to Make]

An example of implementing a Makefile-like document, but
using the source files md5 hashes instead of modification
timestamps.

[constants/targets/sqlite]
description "sqlite object file"
output_filepath "dist/sqlite.o"
source_files {
    - {
        directory "sqlite3"
        pattern "*.c"
    }
}
debug false
command gcc_obj

[constants/targets/release]
description "now binary, release"
output_filepath "dist/now"
source_files {
    - {
        directory "source/now"
        pattern "*.d"
    }
    - {
        directory "cli"
        pattern "*.d"
    }
    - {
        directory "sqlite3"
        pattern "*.d"
    }
    - {
        directory "dist"
        pattern "sqlite.o"
    }
}
debug false
command compile

[constants/targets/debug]
description "now binary, debug"
output_filepath "dist/now.debug"
source_files {
    - {
        directory "source/now"
        pattern "*.d"
    }
    - {
        directory "cli"
        pattern "*.d"
    }
}
debug true
command compile


[constants/targets/hello]
description "hello shared library"
output_filepath "libnow_hello.so"
source_files {
    - {
        directory "source/now"
        pattern "*.d"
    }
    - {
        directory "examples/packages"
        pattern "*.d"
    }
}
debug false
command compile

[system_commands/ldc_bin]
parameters {
    files {
        type {
            - list
            - path
        }
    }
    output_filepath {
        type string
    }
    optimization {
        type int
        min 0
        max 3
        default 2
    }
    extra {
        type list
        default {}
    }
}
key_value_separator "="
option_prefix "-"
command {
    - "ldc2"
    - $files
    - $extra
    - "-I=source"
    - "-I=cli"
    - "--checkaction=halt"
    - "-od=build"
    - "-O$optimization"
    - "-of"
    - $output_filepath
}


[system_commands/ldc_obj]
parameters {
    file {
        type path
    }
    output_filepath {
        type string
    }
    optimization {
        type int
        min 0
        max 3
        default 2
    }
    extra {
        type list
        default {}
    }
}
key_value_separator ""
option_prefix "-"
command {
    - ldc2
    - -c
    - $file
    - $extra
    - "-I=source"
    - "-I=cli"
    - "-O$optimization"
    - "-of"
    - $output_filepath
}

[system_commands/gcc_obj]
parameters {
    file {
        type path
    }
    output_filepath {
        type string
    }
    optimization {
        type int
        min 0
        max 3
        default 2
    }
    extra {
        type list
        default {}
    }
}
key_value_separator ""
option_prefix "-"
command {
    - gcc
    - -c
    - $file
    - $extra
    - "-O$optimization"
    - "-o"
    - $output_filepath
}

[procedures/compile]
parameters {
    files {
        type list
    }
    output_filepath {
        type string
    }
    debug {
        type bool
        default false
    }
}

list
    | as extra
    | if $debug {:: push "--d-debug"}
    | json.encode $extra
    | md5
    | as options_hash

list | as processes
scope "generate object files" {
    list
        | as object_files

    o $files | foreach file {
        path $file
            | :: read
            | md5
            | as hash

        path "build/${hash}-${options_hash}.o"
            | as obj_file
            | >> {on $object_files push}
            | >> {:: exists | :: then {continue}}
            | __ {log "Compiling $file into ${obj_file}."}
            | ldc_obj $file -- (extra = $extra)
            | on $processes push
            | :: length | :: gte 5 | :: then {
                log "Waiting the compiler..."
                o $processes
                    | >> {o | {:: check}}
                    | :: truncate
            }
    }
}

o $processes | {:: check}

scope "generate binary" {
    log "Compiling all $($object_files : length) object files..."
    # log "ldc_bin $object_files $output_filepath -- (extra = $extra)"
    ldc_bin $object_files $output_filepath -- (extra = $extra) | { print }
}


[procedures/make]
parameters {
    target_name {
        type string
    }
}

log "Making $target_name ..."
o $targets | :: get $target_name | as target

scope "resolve dependencies" {
    o $target
        | :: get depends_on
        ! * {list}
        | {make}
}

scope "compile" {
    o $target | :: get command | as command
    list | as source_files

    o $target | :: get source_files | foreach pair {
        path ($pair . directory) | as directory
        set pattern ($pair . pattern)

        o $directory | :: glob.depth $pattern | {
            on $source_files push
        }
    }

    timer
        | __ {
        o $target
            | :: get output_filepath
            | path
            | as output_filepath
            | call $command $source_files -- (debug = ($target . debug))
            | {log "$command: "}
        }
        | >> {
            o | :: msecs | as msecs
            log "$output_filepath was compiled in $msecs miliseconds."
        }
} ! * {
        log ">>>>> ERROR: $error"
        error $error
    }

[commands/build/on.call]
description "Verify if the user is running from inside the examples directory."

o $env
    | :: get "PWD"
    | :: split "/"
    | :: last
    | :: eq "examples" "make"
    | any
    | :: then {
        print "Do not run this program from inside the examples directory!"
        print "Go to the repository root and run it this way:"
        print "    cat examples/make/program.now | now :stdin build"
        print "--------------------------------------------------------"
        exit 1
    }

[commands/build]
description "Build now binary"
parameters {
    target {
        description "debug/release"
        type string
        default "release"
        choices {
            - "release"
            - "debug"
        }
    }
}

make $target


[commands/clean]
description "Clean up the build/ directory."

path "build" | :: glob "*.o" | {:: delete}
