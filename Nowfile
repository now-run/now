[Nowfile for the Now project]

[packages]
- "example/source/example.now"

[constants/dub]
name "now"
description "Auxiliary tool for software projects in general"
authors {
    - "ClÃ©ber Zavadniak"
}
homepage "https://now-run.org"
license "MIT"
"targetType" executable
"sourcePaths" {
    - "cli"
    - "source"
}
"targetPath" "dist"
"postBuildCommands" {
    - "strip dist/now"
}


[Dockerfile]

FROM ubuntu:24.04
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get upgrade -y
RUN apt-get install -y git make gdc
WORKDIR /opt/now
CMD make standalone


[on.error]

log "The program terminated with some error."
return $error


[logging/formats/default]
description "This section defines how the `log` command will behave"

dict
    . (timestamp = [unixtime])
    . (message = $message)
    | json.encode
    | return


[system_commands/dub]
command {
    - dub
}
which {
    - dub
    - -h
}


[system_commands/make]
parameters {
    target {
        type string
    }
}
command {
    - "now"
    - ":f"
    - "examples/make/Nowfile"
    - "build"
    - $target
}

[system_commands/make_clean]
command {
    - "now"
    - ":f"
    - "examples/make/Nowfile"
    - "clean"
}

[procedures/quit]

exit 0

[commands/make]
description "Compiles Now"
parameters {
    target {
        type string
        default "release"
        choices {
            - "release"
            - "debug"
        }
    }
}

make $target | foreach line {
    print "> $line"
}

[commands/clean]
description "Clean up the build/ directory."

make_clean | foreach line {
    print "> $line"
}


[commands/run]
description "Show some help text."
parameters {
    message {
        type string
        default "Try running `now` without any arguments to see
a list of available subcommands for this project."
    }
}

print.yellow $message
print.gray "cl_args: $cl_args"
print.gray "args: $args"


[commands/test]
description "Run all the examples."

try {
    path "examples" : glob "*" | foreach directory {
        print $directory
        val test : get ignore : contains ($directory : basename) : then {
            print "skipping $directory"
            continue
        }
        print "Testing ${directory}..."
        now "$directory" : check
    }
}

[commands/dub]
description "Generate dub.json file"

path "dub.json"
| :: write [json.encode $dub]

[commands/e]
description "Generates an error so we can see the Document error handler in action."

error "Intentional error"

[commands/exit]
description "Test the `exit` command running inside a procedure."

quit
error "this message should not be displayed."

[commands/init]
description "Download Now packages locally"

scope "Update submodules" {
    log "Updating submodules..."
    syscmd git submodule update
        . "--init"
        . "--recursive"
        . "--remote"
        | {print}
}

scope "Download submodules if necessary" {
    path "$script_dir/now/example"
        | as target_dir
        | :: exists
        | :: else {
            print "$target_dir does not exist"
            syscmd git submodule add
                . "git@github.com:now-run/example-package.git"
                . $target_dir
                | {print}
        }
}

[commands/build:standalone]
description "Build Now as a standalone binary."
parameters {
    image_name {
        type string
        default "now-builder"
    }
    image_tag {
        type string
        default latest
    }
}

o "${image_name}:${image_tag}" | as image

scope "build the image for the builder" {
    timer | __ {
        o ($text . "Dockerfile" . body)
            | >> {print}
            | syscmd podman build - -t $image
            | {print}
    }
    | :: seconds | as seconds
    log "image build finished in $seconds seconds."
}

scope "build the binary" {
    timer | __ {
        syscmd podman run -v .:/opt/now $image
        | {print}
    }
    | :: seconds | as seconds

    log "binary build finished in $seconds seconds."
}
